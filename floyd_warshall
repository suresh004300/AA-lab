def floyd_warshall(graph):
 n = len(graph) # Number of vertices in the graph
 # Initialize the distance matrix with the input graph
 dist = [[float('inf')] * n for _ in range(n)]
 # Set the distance from each vertex to itself to 0
 for i in range(n):
 dist[i][i] = 0
 # Populate the initial distances based on the input graph
 for i in range(n):
 for j in range(n):
 if graph[i][j] != 0: # Assume 0 means no edge
 dist[i][j] = graph[i][j]
 # Main loop of the Floyd-Warshall algorithm
 for k in range(n): # Iterate through all vertices as intermediate points
 for i in range(n): # For each source vertex
 for j in range(n): # For each destination vertex
 # If the path through vertex k is shorter, update the distance
 if dist[i][j] > dist[i][k] + dist[k][j]:
 dist[i][j] = dist[i][k] + dist[k][j]
 return dist
# Example usage
graph = [
 [0, 3, float('inf'), 7],
 [8, 0, 2, float('inf')],
 [5, float('inf'), 0, 1],
 [2, float('inf'), float('inf'), 0]
]
result = floyd_warshall(graph)
print("Shortest path distances between all pairs of vertices:")
for row in result:
 print(row)
o/p:
Shortest path distances between all pairs of vertices:
[0, 3, 5, 6]
[7, 0, 2, 3]
[5, 8, 0, 1]
[2, 5, 7, 0]
